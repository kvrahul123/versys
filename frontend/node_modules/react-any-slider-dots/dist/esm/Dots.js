import React, { useEffect, useRef, useState } from 'react';
var makeDotClassName = function (isBigDot, isActiveDot) {
    return "react-any-slider-dots__dot".concat(isBigDot ? ' react-any-slider-dots__dot--big' : '').concat(isActiveDot ? ' react-any-slider-dots__dot--active' : '');
};
var ReactAnySliderDots = function (_a) {
    var dotsCount = _a.dotsCount, activeIndex = _a.activeIndex, _b = _a.visibleDotsCount, visibleDotsCount = _b === void 0 ? 5 : _b, _c = _a.dotGap, dotGap = _c === void 0 ? 4 : _c, _d = _a.dotSize, dotSize = _d === void 0 ? 6 : _d;
    var contentRef = useRef(null);
    var _e = useState({ left: 0, right: visibleDotsCount - 1 }), visibleDotsIndexes = _e[0], setVisibleDotsIndexes = _e[1];
    var visibleBlockWidth = (dotSize + dotGap) * visibleDotsCount;
    useEffect(function () {
        var left = visibleDotsIndexes.left, right = visibleDotsIndexes.right;
        if (activeIndex === 0) {
            setVisibleDotsIndexes({ left: 0, right: visibleDotsCount - 1 });
            return;
        }
        if (left < activeIndex && right > activeIndex)
            return;
        if (left === activeIndex && left > 0) {
            setVisibleDotsIndexes({ left: left - 1, right: right - 1 });
        }
        else if (right === activeIndex && right < dotsCount - 1) {
            setVisibleDotsIndexes({ left: left + 1, right: right + 1 });
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [activeIndex]);
    useEffect(function () {
        if (!contentRef.current)
            return;
        var transitionXValue = visibleDotsIndexes.left * dotSize + Math.max(0, visibleDotsIndexes.left - 1) * dotGap;
        contentRef.current.setAttribute('style', "transform: translateX(-".concat(transitionXValue, "px); gap: ").concat(dotGap, "px"));
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [visibleDotsIndexes]);
    return (React.createElement("div", { className: 'react-any-slider-dots', style: { maxWidth: visibleBlockWidth } },
        React.createElement("div", { className: 'react-any-slider-dots__container', ref: contentRef, style: { gap: dotGap } }, Array(dotsCount)
            .fill(0)
            .map(function (_, index) { return (React.createElement("div", { key: index, className: makeDotClassName(index === 0 ||
                index === dotsCount - 1 ||
                (index > visibleDotsIndexes.left && index < visibleDotsIndexes.right), activeIndex === index), style: { width: dotSize, height: dotSize } })); }))));
};
export default ReactAnySliderDots;
